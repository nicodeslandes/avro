// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen, version 1.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace org.apache.avro.test
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	/// <summary>
	/// Protocol used for testing.
	/// </summary>
	public abstract class Simple : Avro.Specific.ISpecificProtocol
	{
		private static readonly Avro.Protocol protocol = Avro.Protocol.Parse("{\"protocol\":\"Simple\",\"namespace\":\"org.apache.avro.test\",\"doc\":\"Protocol used for " +
				"testing.\",\"types\":[{\"type\":\"enum\",\"name\":\"Kind\",\"namespace\":\"org.apache.avro.tes" +
				"t\",\"symbols\":[\"FOO\",\"BAR\",\"BAZ\"],\"javaAnnotation\":\"org.apache.avro.TestAnnotatio" +
				"n\"},{\"type\":\"fixed\",\"name\":\"MD5\",\"namespace\":\"org.apache.avro.test\",\"size\":16,\"j" +
				"avaAnnotation\":\"org.apache.avro.TestAnnotation\"},{\"type\":\"record\",\"name\":\"TestRe" +
				"cord\",\"namespace\":\"org.apache.avro.test\",\"fields\":[{\"name\":\"name\",\"type\":\"string" +
				"\",\"javaAnnotation\":\"org.apache.avro.TestAnnotation\"},{\"name\":\"kind\",\"type\":\"Kind" +
				"\"},{\"name\":\"hash\",\"type\":\"MD5\"}],\"javaAnnotation\":\"org.apache.avro.TestAnnotatio" +
				"n\"},{\"type\":\"error\",\"name\":\"TestError\",\"namespace\":\"org.apache.avro.test\",\"field" +
				"s\":[{\"name\":\"message\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"TestRecordWith" +
				"Union\",\"namespace\":\"org.apache.avro.test\",\"fields\":[{\"name\":\"kind\",\"type\":[\"null" +
				"\",\"Kind\"]},{\"name\":\"value\",\"type\":[\"null\",\"string\"]}]}],\"messages\":{\"hello\":{\"do" +
				"c\":\"Send a greeting\",\"request\":[{\"name\":\"greeting\",\"type\":\"string\",\"customProp\":" +
				"\"customValue\",\"aliases\":[\"salute\"]}],\"response\":\"string\"},\"echo\":{\"doc\":\"Pretend" +
				" you\'re in a cave!\",\"request\":[{\"name\":\"record\",\"type\":\"TestRecord\"}],\"response\"" +
				":\"TestRecord\"},\"add\":{\"request\":[{\"name\":\"arg1\",\"type\":\"int\"},{\"name\":\"arg2\",\"ty" +
				"pe\":\"int\"}],\"response\":\"int\"},\"echoBytes\":{\"request\":[{\"name\":\"data\",\"type\":\"byt" +
				"es\"}],\"response\":\"bytes\"},\"error\":{\"doc\":\"Always throws an error.\",\"request\":[]," +
				"\"response\":\"null\",\"errors\":[\"TestError\"]},\"ack\":{\"doc\":\"Send a one way message\"," +
				"\"request\":[],\"response\":\"null\",\"one-way\":true}}}");
		public Avro.Protocol Protocol
		{
			get
			{
				return protocol;
			}
		}
		public void Request(Avro.Specific.ICallbackRequestor requestor, string messageName, object[] args, object callback)
		{
			switch(messageName)
			{
				case "hello":
				requestor.Request<System.String>(messageName, args, callback);
				break;

				case "echo":
				requestor.Request<org.apache.avro.test.TestRecord>(messageName, args, callback);
				break;

				case "add":
				requestor.Request<System.Int32>(messageName, args, callback);
				break;

				case "echoBytes":
				requestor.Request<System.Byte[]>(messageName, args, callback);
				break;

				case "error":
				requestor.Request<System.Object>(messageName, args, callback);
				break;

				case "ack":
				requestor.Request<System.Object>(messageName, args, callback);
				break;
			};
		}
		// Send a greeting
		public abstract string hello(string greeting);
		// Pretend you're in a cave!
		public abstract org.apache.avro.test.TestRecord echo(org.apache.avro.test.TestRecord record);
		public abstract int add(int arg1, int arg2);
		public abstract byte[] echoBytes(byte[] data);
		// Always throws an error.
		public abstract object error();
		// Send a one way message
		public abstract void ack();
	}
}
